<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IT Notes</title>
    <link>https://blog.aborilov.ru/post/</link>
    <description>Recent content in Posts on IT Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 30 Jul 2018 09:00:16 +0300</lastBuildDate>
    
	<atom:link href="https://blog.aborilov.ru/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build docker container in GCP container builder</title>
      <link>https://blog.aborilov.ru/post/gcloud_docker_build/</link>
      <pubDate>Mon, 30 Jul 2018 09:00:16 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/gcloud_docker_build/</guid>
      <description>If you need to build docker container and want to save your laptop battery, you can easily build your container in GCP container builder.
You will need to have gcloud on your system.
Authorize the gcloud command-line tool to access your project:
gcloud auth login  Configure your project for the gcloud tool, where [PROJECT_ID] is your GCP project ID that you created or selected in the previous section:
gcloud config set project [PROJECT_ID]  and now you can build your image using GCP container builder</description>
    </item>
    
    <item>
      <title>HTTP to Upspin gateway</title>
      <link>https://blog.aborilov.ru/post/upspin_gateway/</link>
      <pubDate>Thu, 26 Apr 2018 09:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/upspin_gateway/</guid>
      <description>First time I heard about Upspin from this video   and I very like it idea. Who don&amp;rsquo;t know what it is about, can check the site https://upspin.io/ From the documentation:
 Upspin provides a global name space to name all your files. Given an Upspin name, a file can be shared securely, copied efficiently without “download” and “upload”, and accessed from anywhere that has a network connection.
 and recently I deployed upspin server on my GCP VM ok,now I have my dir/store upspin server running, need to store something there and share with someone :) https://t.</description>
    </item>
    
    <item>
      <title>SOCKS5 proxy server in 2 minutes</title>
      <link>https://blog.aborilov.ru/post/proxy/</link>
      <pubDate>Wed, 18 Apr 2018 09:00:16 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/proxy/</guid>
      <description>In the previous post we deployed VPN server on GCP instance, now we can easily run SOCKS5 proxy server on the same instance, for this we only need to install server with command:
sudo apt-get install dante-server and add configuration to file /etc/danted.conf
logoutput: stderr internal: eth0 port = 7777 external: eth0 socksmethod: username user.privileged: root user.unprivileged: nobody client pass { from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0 log: error socksmethod: username } socks pass { from: 0.</description>
    </item>
    
    <item>
      <title>Free VPN server on GCP in 5 minutes</title>
      <link>https://blog.aborilov.ru/post/vpn/</link>
      <pubDate>Tue, 17 Apr 2018 09:29:16 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/vpn/</guid>
      <description>As you might know, there are a lot of blocked services in Russia, LinkedIn, Telegram, etc., and lately, I start to use LinkedIn more extensively. I tried to use some free VPN services, like FlyVPN, Tunnel Bear, but they all have restrictions and slow. That&amp;rsquo;s why I decided to run my own VPN server on some cloud platform. I know that you can run droplet in the digital ocean for only 5$ a month ,</description>
    </item>
    
    <item>
      <title>Переключение между сетевыми профилями NetworkManager через dmenu</title>
      <link>https://blog.aborilov.ru/post/network_manager_dmenu/</link>
      <pubDate>Tue, 25 Aug 2015 16:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/network_manager_dmenu/</guid>
      <description>Для быстрого переключения между профилями NetworkManager через dmenu использую данные скрипт: #!/usr/bin/env python2 import os CHAR = &amp;#34;V &amp;#34; cmd = &amp;#39;nmcli -f name,devices con status|tail -n+2&amp;#39; active_devices = os.popen(cmd).read().split(&amp;#39;\n&amp;#39;) name_dev = {} for name_device in active_devices: if name_device: name, device = name_device.split() name_dev[name] = device all_cons = os.popen(&amp;#39;nmcli -f name con list|tail -n+2&amp;#39;).read().split() active_cons = os.popen(&amp;#39;nmcli -f name con status|tail -n+2&amp;#39;).read().split() selected_list = [CHAR + con if con in active_cons else con for con in all_cons] con = os.</description>
    </item>
    
    <item>
      <title>Выбор и создание сессий tmux</title>
      <link>https://blog.aborilov.ru/post/choose_tmux/</link>
      <pubDate>Wed, 17 Jun 2015 14:15:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/choose_tmux/</guid>
      <description>С помощью этой команды можно подключиться к уже существующей сессии tmux или создать новую сессию с заданным именем. sh -c &amp;#34;tmux ls -f &amp;#39;#{session_name}&amp;#39; | dmenu -l 7 | xargs -i{} urxvtcd -e sh -c &amp;#39;tmux attach -t {} || tmux new -s {}&amp;#39;&amp;#34;
Выполнение данной команды можно повесить на комбинацию клавишь. Для работы необходимо приложение dmenu. Терминал можно заменить на любой другой.</description>
    </item>
    
    <item>
      <title>Сравнение производительности vim, gvim и neovim</title>
      <link>https://blog.aborilov.ru/post/vim_gvim_neovim/</link>
      <pubDate>Wed, 22 Apr 2015 15:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/vim_gvim_neovim/</guid>
      <description>Появилась задача проализировать 1.5млн строк логов, конечно vim в этом очень помог, но запуск макросов на таком количестве строк занимал ощутимое время и поэтому возник вопрос оптимизации.
Написав простой макрос и запустив его на 1000 строк я получил следующие результаты:
gvim на 15% медленее vim, а nvim на 25% быстрее vim.</description>
    </item>
    
    <item>
      <title>Плеер mopidy</title>
      <link>https://blog.aborilov.ru/post/mopidy/</link>
      <pubDate>Tue, 03 Jun 2014 15:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/mopidy/</guid>
      <description>Плеер Mopidy оказался для меня открытием. Плеер может работать как сервер MPD. Управляться клиентом MPD. Проигрывать как локальный контент, так и с SoundCloud, GooglePlay Music, TuneIn &amp;hellip; etc.
Если запускаем плеер как сервис, то конфиг лежит в /etc/mopidy/mopidy.conf
[logging] config_file = /etc/mopidy/logging.conf debug_file = /var/log/mopidy/mopidy-debug.log [local] enabled = true data_dir = /var/lib/mopidy/local media_dir = /var/lib/mopidy/media playlists_dir = /var/lib/mopidy/playlists [soundcloud] enabled = true explore_songs = 25 auth_token = #### [tunein] timeout = 5000 [mpd] enabled = true hostname = 127.</description>
    </item>
    
    <item>
      <title>Оконный менеджер Qtile</title>
      <link>https://blog.aborilov.ru/post/qtile/</link>
      <pubDate>Tue, 03 Jun 2014 14:15:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/qtile/</guid>
      <description>QTile это tiling оконный менеджер написанный полностью на Python. Основные его плюсы состоят в том что написан на Python и вроде как сейчас активно развивается. Конфиг тоже пишется на Python, поэтому для человека знакомого с данным языком проблем с конфигурацией не должно быть.
Установить Qtile можно из git репозитория, репозиториев дистрибутивов, с помощью питоновский утилит pip и easy_install, а так же и из исходных кодов.
Если вы ставили Qtile из репозитория дистрибутива, то на экране login должен быть доступен сеанс Qtile, в него и загружаемся.</description>
    </item>
    
    <item>
      <title>Переключение трека в mpd через dmenu и mpc</title>
      <link>https://blog.aborilov.ru/post/mpd_track/</link>
      <pubDate>Thu, 06 Mar 2014 16:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/mpd_track/</guid>
      <description>Если вы пользуетесь MPD и не хотите постоянно держать запущенным какой-нибудь клиент, типа Sonata, для переключения треков, то можно повесить на hotkey вот такой простой скрипт
mpc playlist | dmenu -l 10 | xargs -I &#39;{}&#39; sh -c &amp;quot;mpc playlist | grep -rne &#39;{}&#39; | awk -F: &#39;{print \$1}&#39;&amp;quot; | xargs -I &#39;{}&#39; sh -c &amp;quot;test -n &#39;{}&#39;&amp;amp;amp;&amp;amp;amp; mpc play &#39;{}&#39;&amp;quot;  получаем текущей playlist
mpc playlist  и выводим его с помощью dmenu(вертикально, 10 строчек)</description>
    </item>
    
    <item>
      <title>Компиляция python кода в exe под Linux</title>
      <link>https://blog.aborilov.ru/post/python2exe/</link>
      <pubDate>Fri, 28 Dec 2012 10:44:16 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/python2exe/</guid>
      <description>Если на linux машинах python установлен повсеместно, то windows все наоборот. Решил скомпилировать свое приложения в exe, причем желательно что бы это был одинокий exe файл и не тянул с собой дополнительные dll библиотеки.
Для компиляции python кода в бинарные файлы есть очень удобная программа pyinstaller.
Поддержку cross компиляции они уже начали добавлять, но пока она работает не полноценно, поэтому я решил установить python под wine.
Устанавливаем wine. Качаем python.</description>
    </item>
    
    <item>
      <title>Не показывать preview для больших архивов в ranger</title>
      <link>https://blog.aborilov.ru/post/range_large_preview/</link>
      <pubDate>Thu, 08 Nov 2012 16:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/range_large_preview/</guid>
      <description>После того как я начал использовать ranger, мне понравилось что он быстро показывает превью для файлов, картинок, архивов. Но вот с архивами была проблема, когда просто перемещаешься по директории и натыкаешься на большой архив, ranger начинает его разархивировать, что бы получить список файлов и пока он не закончит, нельзя перемещаться дальше. Поэтому первое что пришло в голову, заставить ranger не показывать превью для архивов больше определенного размера. Как сделать это штатными средствами я не нашел.</description>
    </item>
    
    <item>
      <title>Виджет раскладки клавиатуры в QTile</title>
      <link>https://blog.aborilov.ru/post/widget_layout/</link>
      <pubDate>Wed, 26 Sep 2012 16:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/widget_layout/</guid>
      <description>В Qtile мне очень не хватало аплета отображающего текущую раскладку клавиатуры и поэтому я решил озадачиться этим вопросам. В прошлой статье я описал как получить текущую раскладку клавиатуры в Python, теперь осталось прикрутить это к qtile. Что оказалось совсем не сложно сделать. За основу я взял виджет часов, который является TextBox&amp;rsquo;ом. Весь Qtile у меня находить в директории
/usr/local/lib/python2.7/dist-packages/libqtile/  виджеты во вложеной директории widget
Класс виджета часов выглядит следующим образом: import datetime from .</description>
    </item>
    
    <item>
      <title>Получение текущей раскладки клавиатуры в python</title>
      <link>https://blog.aborilov.ru/post/keyboard_layout_python/</link>
      <pubDate>Wed, 26 Sep 2012 16:00:00 +0300</pubDate>
      
      <guid>https://blog.aborilov.ru/post/keyboard_layout_python/</guid>
      <description>Я так и не смог найти нормального способа получить текущую раскладку клавиатуры из командрой строки. В интернете много разный примеров, но ни один у меня не выдал нужного результата(система Ubuntu 12.04). Единственное что дает хоть какой-то результат:
xset -q  на выходе получаем
Keyboard Control: auto repeat: on key click percent: 0 LED mask: 00000002 XKB indicators: 00: Caps Lock: off 01: Num Lock: on 02: Scroll Lock: off 03: Compose: off 04: Kana: off 05: Sleep: off 06: Suspend: off 07: Mute: off 08: Misc: off 09: Mail: off 10: Charging: off 11: Shift Lock: off 12: Group 2: off 13: Mouse Keys: off auto repeat delay: 500 repeat rate: 33 auto repeating keys: 00ffffffdffffbbf fadfffefffedffff 9fffffffffffffff fff7ffffffffffff bell percent: 50 bell pitch: 400 bell duration: 100 Pointer Control: acceleration: 2/1 threshold: 4 Screen Saver: prefer blanking: yes allow exposures: yes timeout: 600 cycle: 600 Colors: default colormap: 0x20 BlackPixel: 0 WhitePixel: 16777215 Font Path: /usr/share/fonts/X11/misc,/usr/share/fonts/X11/100dpi/:unscaled,/usr/share/fonts/X11/75dpi/:unscaled,/usr/share/fonts/X11/Type1,/usr/share/fonts/X11/100dpi,/usr/share/fonts/X11/75dpi,/var/lib/defoma/x-ttcidfont-conf.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.aborilov.ru/post/logrus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aborilov.ru/post/logrus/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.aborilov.ru/post/tiling_wm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aborilov.ru/post/tiling_wm/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>